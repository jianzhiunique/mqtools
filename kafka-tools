#!/usr/local/php7/bin/php
<?php
$zkServer = '1:2181,2:2181,3:2181';
$bootstrapServer = '1:9092,2:9092,3:9092';
$path = '/usr/local/kafka/bin/';

if ($argc < 3) {
    $usage = <<<USE
Usage: ./kafka-tools clazz method [params...]
for example

./kafka-tools topics list
./kafka-tools topics createSimpleTopic test-tools 6 3
./kafka-tools topics createTopicWithConfig test-tools 6 3 retention.ms=36000000,retention.bytes=10240
./kafka-tools topics createTopicWithAssign test-tools 6 4 0,1,2,3,4,5 6,7,8,9,10,11
./kafka-tools topics addTopicPartition test-tools 9 [! reach to]
./kafka-tools topics describeTopics [!!! operation not recommand if there are too many topics]
./kafka-tools topics describeTopic test-tools
./kafka-tools topics deleteTopic test-tools
./kafka-tools run getTopicLastOffset test-tools
./kafka-tools configs list topics test-tools
./kafka-tools configs list topics [!!! operation not recommand if there are too many topics]
./kafka-tools configs list brokers
./kafka-tools configs delete topics test-tools retention.ms,retention.bytes
./kafka-tools configs alter topics test-tools retention.ms=36000000,retention.bytes=10240
./kafka-tools consumers listZkConsumer
./kafka-tools consumers listKafkaConsumer
./kafka-tools consumers describeZkConsumer groupName
./kafka-tools consumers describeKafkaConsumer groupName
./kafka-tools consumers deleteConsumerGroup groupName
./kafka-tools election electAll
./kafka-tools election electPart test-tools,test,...
./kafka-tools reassign generate test-tools 0,1 
./kafka-tools reassign execute /tmp/reassignment-154504952591.json
./kafka-tools reassign verify /tmp/reassignment-154504952591.json


USE;
    die($usage);
}
array_shift($argv);
$clazz = ucfirst(array_shift($argv));
$method = array_shift($argv);
$client = new $clazz($zkServer, $bootstrapServer, $path);
if ($argc > 3) {
    $params = array_reduce($argv, function ($carry, $item) {
        if (strpos($item, ',') !== false) {
            $current = array_filter(explode(',', $item), function ($value) {
                if ($value == 0) {
                    return true;
                }
                return !empty($value);
            });
        } else {
            $current = $item;
        }
        $carry[] = $current;
        return $carry;
    }, []);
    call_user_func_array([$client, $method], $params);
} else {
    call_user_func([$client, $method]);
}

/**
 * base class client
 */
class Client
{
    protected $zkServer;
    protected $bootstrapServer;
    protected $kafkaBinPath;
    protected $command = '';
    protected $shellCommand;

    public function __construct($zkServer, $bootstrapServer, $kafkaBinPath)
    {
        $this->zkServer = $zkServer;
        $this->bootstrapServer = $bootstrapServer;
        $this->kafkaBinPath = $kafkaBinPath;
        //gen shell command
        $this->shellCommand = $kafkaBinPath . static::SH;
    }

    /**
     * construct command
     */
    protected function _setCommandParams($command, ...$params)
    {
        $this->command = '';
        $this->command .= $command;
        foreach ($params as $param) {
            $this->command .= $param;
        }
        //var_dump($this->command);
    }

    /**
     * use shell_exec execute command
     */
    protected function _execCommand(...$params)
    {
        var_dump(vsprintf($this->command, $params));
        var_dump(shell_exec(vsprintf($this->command, $params)));
    }

    protected function _execCommandReturn(...$params)
    {
        //var_dump(vsprintf($this->command, $params));
        return(shell_exec(vsprintf($this->command, $params)));
    }
}

/**
 * common config class
 * for params configuration or quota configuration etc
 */
class Configs extends Client
{
    const SH = 'kafka-configs.sh ';

    /**
     * list all override configs of a topic
     * can not access brokers default configs
     */
    public function list($type, $entity = '')
    {
        if ($entity != '') {
            $this->_setCommandParams(
                $this->shellCommand,
                Params::PARAM_ZOOKEEPER,
                Params::PARAM_DESCRIBE,
                Params::PARAM_ENTITY_TYPE,
                Params::PARAM_ENTITY_NAME
            );
            $this->_execCommand(
                $this->zkServer,
                $type,
                $entity
            );
        } else {
            $this->_setCommandParams(
                $this->shellCommand,
                Params::PARAM_ZOOKEEPER,
                Params::PARAM_DESCRIBE,
                Params::PARAM_ENTITY_TYPE
            );

            $this->_execCommand(
                $this->zkServer,
                $type
            );
        }
    }

    /**
     * alter topic configs
     */
    public function alter($type, $topicName, $configs)
    {
        /*$configsString = rtrim(array_reduce(
            array_keys($configs),
            function ($carry, $key) use ($configs) {
                return $carry . "$key={$configs[$key]},";
            }
        ), ',');*/
        
        $this->_setCommandParams(
            $this->shellCommand,
            ($type === Params::CONST_ENTITY_TYPE_BROKERS ? Params::PARAM_BOOTSTRAP_SERVER : Params::PARAM_ZOOKEEPER),
            Params::PARAM_ALTER,
            Params::PARAM_ENTITY_TYPE,
            Params::PARAM_ENTITY_NAME,
            Params::PARAM_ADD_CONFIG
        );
            
        $this->_execCommand(
            ($type === Params::CONST_ENTITY_TYPE_BROKERS ? $this->bootstrapServer : $this->zkServer),
            $type,
            $topicName,
            implode(',', $configs)
        );
    }

    /**
     * delete topic configs
     */
    public function delete($type, $topicName, $configs)
    {
        $this->_setCommandParams(
            $this->shellCommand,
            ($type === Params::CONST_ENTITY_TYPE_BROKERS ? Params::PARAM_BOOTSTRAP_SERVER : Params::PARAM_ZOOKEEPER),
            Params::PARAM_ALTER,
            Params::PARAM_ENTITY_TYPE,
            Params::PARAM_ENTITY_NAME,
            Params::PARAM_DELETE_CONFIG
        );
    
        $this->_execCommand(
            ($type === Params::CONST_ENTITY_TYPE_BROKERS ? $this->bootstrapServer : $this->zkServer),
            $type,
            $topicName,
            implode(',', $configs)
        );
    }
}

class Consumers extends Client
{
    const SH = 'kafka-consumer-groups.sh ';

    /**
     * list all zookeeper comsumer group
     */
    public function listZkConsumer()
    {
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_LIST
        );
        $this->_execCommand($this->zkServer);
    }

    /**
     * list all kafka comsumer group
     */
    public function listKafkaConsumer()
    {
        $this->_setCommandParams(
            $this->shellCommand,
            // Params::PARAM_NEW_CONSUMER,
            Params::PARAM_BOOTSTRAP_SERVER,
            Params::PARAM_LIST
        );
        $this->_execCommand($this->bootstrapServer);
    }

    /**
     * describe zookeeper comsumer group
     */
    public function describeZkConsumer($groupName)
    {
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_DESCRIBE,
            Params::PARAM_GROUP
        );
        $this->_execCommand($this->zkServer, $groupName);
    }

    /**
     * describe kafka comsumer group
     */
    public function describeKafkaConsumer($groupName)
    {
        $this->_setCommandParams(
            $this->shellCommand,
            // Params::PARAM_NEW_CONSUMER,
            Params::PARAM_BOOTSTRAP_SERVER,
            Params::PARAM_DESCRIBE,
            Params::PARAM_GROUP
        );
        $this->_execCommand($this->bootstrapServer, $groupName);
    }

    /**
     * delete consumer group
     * you must close consumers before invoke this function
     * from kafka : Group deletion only works for old ZK-based consumer groups, and
     * one has to use it carefully to only delete groups that are not active.
     */
    public function deleteConsumerGroup($groupName)
    {
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_DELETE,
            Params::PARAM_GROUP
        );
        $this->_execCommand($this->zkServer, $groupName);
    }
}


/**
 * Election's purpose is making preferred replica be leader.
 * electAll method is for all topics and partitions, sometimes it is slow and block;
 * electPart method is quicker, you should specify topic and partition like this :
 *      [['topic' => 'renjianzhitest','partition' => 2],[], ...]
 * election has no effect on users, because they can find the new leader and follow it.
 */
class Election extends Client
{
    const SH = 'kafka-preferred-replica-election.sh ';

    public function electAll()
    {
        //construct command
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER
        );
        //execute command
        $this->_execCommand($this->zkServer);
    }

    public function electPart($topics = '')
    {
        if (empty($topics)) {
            die("must list topics, you can use ',' \n");
        }
        $partitions = [];
        //topic partions number
        $topicsClient = new Topics($this->zkServer, $this->bootstrapServer, $this->kafkaBinPath);
        foreach ($topics as $topic) {
            $line0 = explode("\n", $topicsClient->_describeTopicForElection($topic))[0];
            $line00 = explode("ReplicationFactor", $line0)[0];
            $partitionsNum = intval(explode("PartitionCount:", $line00)[1]);
            for ($i = 0; $i < $partitionsNum; $i++) {
                $partitions[] = ['topic' => $topic, 'partition' => $i];
            }
        }
        //save json file
        $json = ['partitions' => $partitions];
        $fileName = Params::JSON_FILE_PREFIX_PREFERRED . time() . rand(1, 100) . '.json';
        file_put_contents($fileName, json_encode($json));
        
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_PATH_TO_JSON_FILE
        );

        $this->_execCommand(
            $this->zkServer,
            $fileName
        );
        unlink($fileName);
    }
}

/**
 * This class moves topic partitions between replicas.
 * Adding replicas factor is not obvious but it can be done.
 */
class Reassign extends Client
{
    const SH = 'kafka-reassign-partitions.sh ';

    public function generate($topicName, $brokerList)
    {
        if (is_array($brokerList)) {
            $brokerList = implode(',', $brokerList);
        }
        //generate json file then save to file
        $json = [];
        $json['topics'] = [['topic' => $topicName]];
        $json['version'] = 1;
        $fileName = Params::JSON_FILE_PREFIX_TOPICS_TO_MOVE . time() . rand(1, 100) . '.json';
        file_put_contents($fileName, json_encode($json));
        //construct command
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_BROKER_LIST,
            Params::PARAM_TOPICS_TO_MOVE_JSON_FILE,
            Params::PARAM_GENERATE
        );
        //execute command then save plan
        $ret = $this->_execCommandReturn(
            $this->zkServer,
            $brokerList,
            $fileName
        );
        unlink($fileName);
        $fileName = Params::JSON_FILE_PREFIX_REASSIGNMENT . time() . rand(1, 100) . '.json';
        file_put_contents($fileName, explode("\n", $ret)[4]);
        var_dump($fileName);
    }

    public function execute($fileName)
    {
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_REASSIGNMENT_JSON_FILE,
            Params::PARAM_EXECUTE
        );

        $this->_execCommand(
            $this->zkServer,
            $fileName
        );
    }

    public function verify($fileName)
    {
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_REASSIGNMENT_JSON_FILE,
            Params::PARAM_VERIFY
        );

        $this->_execCommand(
            $this->zkServer,
            $fileName
        );
        //unlink($fileName);
    }
}

class Run extends Client
{
    const SH = 'kafka-run-class.sh ';

    /**
     * get topic's partitions last offset
     */
    public function getTopicLastOffset($topic)
    {
        //construct command
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_RUN_GET_OFFSET,
            Params::PARAM_RUN_GET_OFFSET_BROKER_LIST,
            Params::PARAM_TOPIC,
            Params::PARAM_RUN_GET_OFFSET_TIME
        );
        //execute command
        $this->_execCommand($this->bootstrapServer, $topic, -1);
    }
}

class Topics extends Client
{
    const SH = 'kafka-topics.sh ';
    /**
     * list all topic names
     */
    public function list()
    {
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_LIST
        );
        $this->_execCommand($this->zkServer);
    }

    /**
     * describe all topics
     */
    public function describeTopics()
    {
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_DESCRIBE
        );
        $this->_execCommand($this->zkServer);
    }

    /**
     * describe specfic topic
     */
    public function describeTopic($topicName)
    {
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_DESCRIBE,
            Params::PARAM_TOPIC
        );
        $this->_execCommand($this->zkServer, $topicName);
    }

    public function _describeTopicForElection($topicName)
    {
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_DESCRIBE,
            Params::PARAM_TOPIC
        );
        return $this->_execCommandReturn($this->zkServer, $topicName);
    }

    /**
     * delete specific topic
     */
    public function deleteTopic($topicName)
    {
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_DELETE,
            Params::PARAM_TOPIC
        );
        $this->_execCommand($this->zkServer, $topicName);
    }

    /**
     * create a simple topic
     */
    public function createSimpleTopic($topicName, $partitions, $factor)
    {
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_CREATE,
            Params::PARAM_TOPIC,
            Params::PARAM_PARTITIONS,
            Params::PARAM_REPLICATION_FACTOR
        );
        $this->_execCommand($this->zkServer, $topicName, $partitions, $factor);
    }

    public function createTopicWithAssign($topicName, $partitions, $factor, $part1, $part2)
    {
        if ($factor%2 != 0) {
            die("factor must be even in this mode! \n");
        }
        $assignment = [];
        for ($i = 0; $i < $partitions; $i++) {
            $replica = [];
            for ($j = 0; $j < $factor/2; $j++) {
                $node = $part1[$j];
                array_push($replica, $node);
            }
            array_push($part1, array_shift($part1));
            for ($j = 0; $j < $factor/2; $j++) {
                $node = $part2[$j];
                array_push($replica, $node);
            }
            array_push($part2, array_shift($part2));
            array_push($assignment, implode(':', $replica));
        }
        $assignmentStr = implode(',', $assignment);
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_CREATE,
            Params::PARAM_TOPIC,
            Params::PARAM_REPLICA_ASSIGNMENT
        );

        $this->_execCommand($this->zkServer, $topicName, $assignmentStr);
    }

    /**
     * create topic with config
     */
    public function createTopicWithConfig($topicName, $partitions, $factor, $config)
    {
        if (!is_array($config)) {
            $config = [$config];
        }

        $params = [
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_CREATE,
            Params::PARAM_TOPIC,
            Params::PARAM_PARTITIONS,
            Params::PARAM_REPLICATION_FACTOR,
        ];

        foreach ($config as $value) {
            $params[] = Params::PARAM_TOPICS_CONFIG;
        }

        call_user_func_array([$this, '_setCommandParams'], $params);

        $paramsValue = [
            $this->zkServer,
            $topicName,
            $partitions,
            $factor
        ];

        foreach ($config as $value) {
            $paramsValue[] = $value;
        }
        call_user_func_array([$this, '_execCommand'], $paramsValue);
    }

    /**
     * only add partitions
     * can not delete partitions, you can and must re-create topic to achieve this
     */
    public function addTopicPartition($topicName, $partitions)
    {
        $this->_setCommandParams(
            $this->shellCommand,
            Params::PARAM_ZOOKEEPER,
            Params::PARAM_ALTER,
            Params::PARAM_TOPIC,
            Params::PARAM_PARTITIONS
        );

        $this->_execCommand($this->zkServer, $topicName, $partitions);
    }
}

class Params
{
    const KAFKA_BIN_PATH = '/usr/local/kafka/bin/';
    const PARAM_ZOOKEEPER = '--zookeeper %s ';
    const PARAM_LIST = '--list ';
    const PARAM_DESCRIBE = '--describe ';
    const PARAM_DELETE = '--delete ';
    const PARAM_CREATE = '--create ';
    const PARAM_ALTER = '--alter ';
    const PARAM_GENERATE = '--generate ';
    const PARAM_EXECUTE = '--execute ';
    const PARAM_VERIFY = '--verify ';

    const PARAM_TOPIC = '--topic %s ';
    const PARAM_PARTITIONS = '--partitions %s ';
    const PARAM_REPLICATION_FACTOR = '--replication-factor %s ';
    const PARAM_TOPICS_CONFIG = '--config %s ';
    const PARAM_REPLICA_ASSIGNMENT = '--replica-assignment %s ';

    const PARAM_BOOTSTRAP_SERVER = '--bootstrap-server %s ';
    const PARAM_NEW_CONSUMER = '--new-consumer ';
    const PARAM_GROUP = '--group %s ';
    const PARAM_ENTITY_TYPE = '--entity-type %s ';
    const PARAM_ENTITY_NAME = '--entity-name %s ';
    const PARAM_ADD_CONFIG = '--add-config %s ';
    const PARAM_DELETE_CONFIG = '--delete-config %s ';
    
    const CONST_ENTITY_TYPE_TOPICS = 'topics';
    const CONST_ENTITY_TYPE_CLIENTS = 'clients';
    const CONST_ENTITY_TYPE_USERS = 'users';
    const CONST_ENTITY_TYPE_BROKERS = 'brokers';

    const JSON_FILE_PREFIX_TOPICS_TO_MOVE = '/tmp/topics-to-move-json-file-';
    const JSON_FILE_PREFIX_REASSIGNMENT = '/tmp/reassignment-';
    const JSON_FILE_PREFIX_PREFERRED = '/tmp/preferred-';

    const PARAM_TOPICS_TO_MOVE_JSON_FILE = '--topics-to-move-json-file %s ';
    const PARAM_REASSIGNMENT_JSON_FILE = '--reassignment-json-file %s ';
    const PARAM_BROKER_LIST = '--broker-list %s ';
    const PARAM_PATH_TO_JSON_FILE = '--path-to-json-file %s ';

    const PARAM_RUN_GET_OFFSET = 'kafka.tools.GetOffsetShell ';
    const PARAM_RUN_GET_OFFSET_BROKER_LIST = '--broker-list %s ';
    const PARAM_RUN_GET_OFFSET_TIME = '--time %s';
}
